[使用说明]
python getshell.py -k xx.txt -f aa.txt
-k 调用killrepeat函数  去掉xx.txt内的重复项
-f 调用fckgetshell函数  对aa.txt内的每一行网址进行fck漏洞的检查，如果存在自动getshell
-a 调用abstract函数  提取shell前缀
-t 线程数控制 默认50线程
-s 调用struts函数 对txt内url进行struts2漏洞检测
-i 调用iis put函数getshell
#(该功能已无法使用，因为python自身的不可抗力bug)-d 调用dedegetshell函数   进行5.7 download.php变量覆盖test exploit

测试1000个url，最快的时候20s. 4M带宽
记住 要想达到最快速度  请用PyPy
pypy要选1.8版本，较为稳定

[bug血泪史]
(1) 15.03.14开始写，于03.24写完fckgetshell的功能.

3.25凌晨将urllib2换为requests
#20150325011615写完fckgetshell()函数beta版，愿无bug

(2) 03.31凌晨一点二十，第21次修改，改进killrepeat函数，去重复后将存活的url保存survival.txt内,准备在03.31号将函数的改为多线程调用

(3) 04.02凌晨十二点半增加abstract函数,多线程还没改

(4) 04.02晚上十一点把大循环拆了. 现在改bug感觉舒服不少

(5) 04.03凌晨一点四十,把asp和aspx的上传函数整合到一起了,代码量缩减20行，针对某些傻逼站长用linux不会配置导致的路径出现../../致使python requests.get的时候返回403问题进行了优化..

(6) 04.06 考虑到fckgetshell主函数调用上传函数后的返回值问题，对相应代码区域进行了修改

(7) 04.13 有些站可能存在漏洞文件 但是却无权限，这时候会异常，进行了修改，异常跳到无过滤接口进行二次上传的测试

(8) 04.14 对fckgetshell函数进行了线程优化，对函数的返回值进行了改进

(9) 04.15凌晨一点，将去重复和验证存活的函数工作方式改为多线程

(10) 04.15下午两点半 加入了一个邮件后门，fck函数执行后  会自动向一个邮箱发送shell内容

(11) 04.15晚上十一点半修改了二次上传后可能没有存储"(1).jpg"的bug

(12) 对某些网站上传成功却无返回页面的问题进行了改进
     #写完后我发现下面这段if else代码块我copy了两次...其实可以封装成一个函数
     #不过这又得牵扯到一些参数问题，改的话很麻烦
     #而且封装成函数不见得执行效率会变高，只是修改此段代码的时候方便而已
     #然而我并不打算再对这段代码动刀了
     #04.16下午四点四十逃了座谈会后
(13) 04.18修复了一个多线程死循环问题，问题出在queue.get()方法上，我之前以为队列为空直接结束的，没想到线程暂停，然后i.join()以为线程没执行完，程序变成假死状态...改成了queue.get(block=False)迎刃而解

(14) 04.19加入了ctrl+c中断功能，说道中断...其实python的多线程没有中断这一说...
因为我用的是队列，所以清空队列保证多线程二次循环的时候只执行代码判断
多余的线程早早queue.get()了，所以即使结束程序清空队列也会执行完毕，但是ctrl+c后没必要回显，所以我直接干掉解释器进程了，也不知道这样做好不好....

(15) 04.19晚上十点半，对提取存活url函数加入了中断功能

(16) 04.26 修改了一个全局变量的引用问题，原代码直接if sign==False:   如果对全局变量做了修改就变成了局部变量，所以会触发异常，在判断前   先global sign再次声明

(17) 04.26下午一点半，再次修改了上传函数返回值的问题.之前没有考虑到中国国情，自动模拟文件名导致了忽略异常处理的问题...

(18) 04.26下午五点十五，加了threadfunc函数的执行计时，网上说timeit高效 。。。其实没感觉哪里高效，我直接用的时间相减计时

(19) 04.27凌晨一点十二，增加了头部信息的判断，只选择iis 6.0的网站进行扫描

(20) 04.28凌晨零点三十分，修复了有时候邮件发送失败和无法写入txt的bug

(21) 04.28去掉了中断功能...话说去掉这功能后，程序又发生了一个随机性的bug,（注意‘随机性’这三个字），因为随机，所以我也不知道具体是哪段代码出了问题.看人品了...

(22) 05.19 对存在漏洞的shell进行了判断，改进之后误报几乎为0

(23) 06.04 增加了struts2漏洞扫描功能,dede v5.7变量覆盖getshell，密码1

(24) 06.07 打印出扫描进度

(25) 06.12 换成了pypy解释器后   四分钟扫描5000url，被感动了...

(26) 06.21 凌晨2.20修正了一个误报的bug

(27) 09.11 0:48 另搞了一个linux版本  多进程加多线程  应该会很快  细节就不细说了 累

(28) 09.12 15:34 加了iis put getshell函数.

(29) 09.13 02:40 将fck目录的探测换成了httplib模块，仅仅是不到十行的探针
而已，多了麻烦，而且requests就是封装的urllib3，urllib3有缓存 不见得比httplib慢，目前linux版本有个多进程写文件的bug，明天再改. 累死了

(30) 09.13 17:10 修复了linux下的bug,是这样的，linux下pypy如果要想多进程写文件必须在要多进程函数内开启文件流，并且闭合. 在linux python下没有这个限制

(30) 10.26 中午头,  突然发现linux并发竟然不如win的伪多线程快，上下文切换阻塞严重，研究了一下  原来是踩中了python的天坑...  while True改成while 1 就好了
